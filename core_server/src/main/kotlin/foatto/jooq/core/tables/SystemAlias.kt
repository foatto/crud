/*
 * This file is generated by jOOQ.
 */
package foatto.jooq.core.tables


import foatto.jooq.core.Public
import foatto.jooq.core.indexes.SYSTEM_ALIAS_NAME
import foatto.jooq.core.keys.SYSTEM_ALIAS_PKEY
import foatto.jooq.core.tables.records.SystemAliasRecord

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row12
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SystemAlias(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, SystemAliasRecord>?,
    aliased: Table<SystemAliasRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<SystemAliasRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.system_alias</code>
         */
        val SYSTEM_ALIAS = SystemAlias()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<SystemAliasRecord> = SystemAliasRecord::class.java

    /**
     * The column <code>public.system_alias.id</code>.
     */
    val ID: TableField<SystemAliasRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.system_alias.name</code>.
     */
    val NAME: TableField<SystemAliasRecord, String?> = createField(DSL.name("name"), SQLDataType.VARCHAR(250), this, "")

    /**
     * The column <code>public.system_alias.control_name</code>.
     */
    val CONTROL_NAME: TableField<SystemAliasRecord, String?> = createField(DSL.name("control_name"), SQLDataType.VARCHAR(250), this, "")

    /**
     * The column <code>public.system_alias.model_name</code>.
     */
    val MODEL_NAME: TableField<SystemAliasRecord, String?> = createField(DSL.name("model_name"), SQLDataType.VARCHAR(250), this, "")

    /**
     * The column <code>public.system_alias.descr</code>.
     */
    val DESCR: TableField<SystemAliasRecord, String?> = createField(DSL.name("descr"), SQLDataType.VARCHAR(250), this, "")

    /**
     * The column <code>public.system_alias.authorization_need</code>.
     */
    val AUTHORIZATION_NEED: TableField<SystemAliasRecord, Int?> = createField(DSL.name("authorization_need"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.system_alias.show_row_no</code>.
     */
    val SHOW_ROW_NO: TableField<SystemAliasRecord, Int?> = createField(DSL.name("show_row_no"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.system_alias.show_user_column</code>.
     */
    val SHOW_USER_COLUMN: TableField<SystemAliasRecord, Int?> = createField(DSL.name("show_user_column"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.system_alias.table_page_size</code>.
     */
    val TABLE_PAGE_SIZE: TableField<SystemAliasRecord, Int?> = createField(DSL.name("table_page_size"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.system_alias.newable</code>.
     */
    val NEWABLE: TableField<SystemAliasRecord, Int?> = createField(DSL.name("newable"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.system_alias.new_auto_read</code>.
     */
    val NEW_AUTO_READ: TableField<SystemAliasRecord, Int?> = createField(DSL.name("new_auto_read"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.system_alias.default_parent_user</code>.
     */
    val DEFAULT_PARENT_USER: TableField<SystemAliasRecord, Int?> = createField(DSL.name("default_parent_user"), SQLDataType.INTEGER, this, "")

    private constructor(alias: Name, aliased: Table<SystemAliasRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<SystemAliasRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.system_alias</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.system_alias</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.system_alias</code> table reference
     */
    constructor(): this(DSL.name("system_alias"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, SystemAliasRecord>): this(Internal.createPathAlias(child, key), child, key, SYSTEM_ALIAS, null)
    override fun getSchema(): Schema = Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(SYSTEM_ALIAS_NAME)
    override fun getPrimaryKey(): UniqueKey<SystemAliasRecord> = SYSTEM_ALIAS_PKEY
    override fun getKeys(): List<UniqueKey<SystemAliasRecord>> = listOf(SYSTEM_ALIAS_PKEY)
    override fun `as`(alias: String): SystemAlias = SystemAlias(DSL.name(alias), this)
    override fun `as`(alias: Name): SystemAlias = SystemAlias(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): SystemAlias = SystemAlias(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): SystemAlias = SystemAlias(name, null)

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row12<Int?, String?, String?, String?, String?, Int?, Int?, Int?, Int?, Int?, Int?, Int?> = super.fieldsRow() as Row12<Int?, String?, String?, String?, String?, Int?, Int?, Int?, Int?, Int?, Int?, Int?>
}
