/*
 * This file is generated by jOOQ.
 */
package foatto.jooq.core.tables.records


import foatto.jooq.core.tables.SystemFileStore

import org.jooq.Field
import org.jooq.Record5
import org.jooq.Row5
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SystemFileStoreRecord() : TableRecordImpl<SystemFileStoreRecord>(SystemFileStore.SYSTEM_FILE_STORE), Record5<Int?, Int?, String?, String?, String?> {

    var id: Int?
        set(value) = set(0, value)
        get() = get(0) as Int?

    var fileId: Int?
        set(value) = set(1, value)
        get() = get(1) as Int?

    var name: String?
        set(value) = set(2, value)
        get() = get(2) as String?

    var dir: String?
        set(value) = set(3, value)
        get() = get(3) as String?

    var comment: String?
        set(value) = set(4, value)
        get() = get(4) as String?

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row5<Int?, Int?, String?, String?, String?> = super.fieldsRow() as Row5<Int?, Int?, String?, String?, String?>
    override fun valuesRow(): Row5<Int?, Int?, String?, String?, String?> = super.valuesRow() as Row5<Int?, Int?, String?, String?, String?>
    override fun field1(): Field<Int?> = SystemFileStore.SYSTEM_FILE_STORE.ID
    override fun field2(): Field<Int?> = SystemFileStore.SYSTEM_FILE_STORE.FILE_ID
    override fun field3(): Field<String?> = SystemFileStore.SYSTEM_FILE_STORE.NAME
    override fun field4(): Field<String?> = SystemFileStore.SYSTEM_FILE_STORE.DIR
    override fun field5(): Field<String?> = SystemFileStore.SYSTEM_FILE_STORE.COMMENT
    override fun component1(): Int? = id
    override fun component2(): Int? = fileId
    override fun component3(): String? = name
    override fun component4(): String? = dir
    override fun component5(): String? = comment
    override fun value1(): Int? = id
    override fun value2(): Int? = fileId
    override fun value3(): String? = name
    override fun value4(): String? = dir
    override fun value5(): String? = comment

    override fun value1(value: Int?): SystemFileStoreRecord {
        this.id = value
        return this
    }

    override fun value2(value: Int?): SystemFileStoreRecord {
        this.fileId = value
        return this
    }

    override fun value3(value: String?): SystemFileStoreRecord {
        this.name = value
        return this
    }

    override fun value4(value: String?): SystemFileStoreRecord {
        this.dir = value
        return this
    }

    override fun value5(value: String?): SystemFileStoreRecord {
        this.comment = value
        return this
    }

    override fun values(value1: Int?, value2: Int?, value3: String?, value4: String?, value5: String?): SystemFileStoreRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        return this
    }

    /**
     * Create a detached, initialised SystemFileStoreRecord
     */
    constructor(id: Int? = null, fileId: Int? = null, name: String? = null, dir: String? = null, comment: String? = null): this() {
        this.id = id
        this.fileId = fileId
        this.name = name
        this.dir = dir
        this.comment = comment
    }
}
