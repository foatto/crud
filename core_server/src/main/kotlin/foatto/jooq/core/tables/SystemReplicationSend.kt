/*
 * This file is generated by jOOQ.
 */
package foatto.jooq.core.tables


import foatto.jooq.core.Public
import foatto.jooq.core.indexes.SYSTEM_REPLICATION_SEND_DEST
import foatto.jooq.core.indexes.SYSTEM_REPLICATION_SEND_SOUR
import foatto.jooq.core.indexes.SYSTEM_REPLICATION_SEND_TIME_KEY
import foatto.jooq.core.tables.records.SystemReplicationSendRecord

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SystemReplicationSend(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, SystemReplicationSendRecord>?,
    aliased: Table<SystemReplicationSendRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<SystemReplicationSendRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.system_replication_send</code>
         */
        val SYSTEM_REPLICATION_SEND = SystemReplicationSend()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<SystemReplicationSendRecord> = SystemReplicationSendRecord::class.java

    /**
     * The column <code>public.system_replication_send.dest_name</code>.
     */
    val DEST_NAME: TableField<SystemReplicationSendRecord, String?> = createField(DSL.name("dest_name"), SQLDataType.VARCHAR(250), this, "")

    /**
     * The column <code>public.system_replication_send.sour_name</code>.
     */
    val SOUR_NAME: TableField<SystemReplicationSendRecord, String?> = createField(DSL.name("sour_name"), SQLDataType.VARCHAR(250), this, "")

    /**
     * The column <code>public.system_replication_send.time_key</code>.
     */
    val TIME_KEY: TableField<SystemReplicationSendRecord, Long?> = createField(DSL.name("time_key"), SQLDataType.BIGINT, this, "")

    private constructor(alias: Name, aliased: Table<SystemReplicationSendRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<SystemReplicationSendRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.system_replication_send</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.system_replication_send</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.system_replication_send</code> table reference
     */
    constructor(): this(DSL.name("system_replication_send"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, SystemReplicationSendRecord>): this(Internal.createPathAlias(child, key), child, key, SYSTEM_REPLICATION_SEND, null)
    override fun getSchema(): Schema = Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(SYSTEM_REPLICATION_SEND_DEST, SYSTEM_REPLICATION_SEND_SOUR, SYSTEM_REPLICATION_SEND_TIME_KEY)
    override fun `as`(alias: String): SystemReplicationSend = SystemReplicationSend(DSL.name(alias), this)
    override fun `as`(alias: Name): SystemReplicationSend = SystemReplicationSend(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): SystemReplicationSend = SystemReplicationSend(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): SystemReplicationSend = SystemReplicationSend(name, null)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row3<String?, String?, Long?> = super.fieldsRow() as Row3<String?, String?, Long?>
}
