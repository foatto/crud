/*
 * This file is generated by jOOQ.
 */
package foatto.jooq.core.tables


import foatto.jooq.core.Public
import foatto.jooq.core.indexes.SYSTEM_USERS_DISABLED
import foatto.jooq.core.indexes.SYSTEM_USERS_LOGIN
import foatto.jooq.core.indexes.SYSTEM_USERS_ORG_TYPE
import foatto.jooq.core.indexes.SYSTEM_USERS_PARENT
import foatto.jooq.core.indexes.SYSTEM_USERS_PWD
import foatto.jooq.core.indexes.SYSTEM_USERS_USER
import foatto.jooq.core.keys.SYSTEM_USERS_PKEY
import foatto.jooq.core.tables.records.SystemUsersRecord

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row22
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SystemUsers(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, SystemUsersRecord>?,
    aliased: Table<SystemUsersRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<SystemUsersRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.system_users</code>
         */
        val SYSTEM_USERS = SystemUsers()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<SystemUsersRecord> = SystemUsersRecord::class.java

    /**
     * The column <code>public.system_users.id</code>.
     */
    val ID: TableField<SystemUsersRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.system_users.parent_id</code>.
     */
    val PARENT_ID: TableField<SystemUsersRecord, Int?> = createField(DSL.name("parent_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.system_users.is_disabled</code>.
     */
    val IS_DISABLED: TableField<SystemUsersRecord, Int?> = createField(DSL.name("is_disabled"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.system_users.org_type</code>.
     */
    val ORG_TYPE: TableField<SystemUsersRecord, Int?> = createField(DSL.name("org_type"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.system_users.login</code>.
     */
    val LOGIN: TableField<SystemUsersRecord, String?> = createField(DSL.name("login"), SQLDataType.VARCHAR(250), this, "")

    /**
     * The column <code>public.system_users.pwd</code>.
     */
    val PWD: TableField<SystemUsersRecord, String?> = createField(DSL.name("pwd"), SQLDataType.VARCHAR(250), this, "")

    /**
     * The column <code>public.system_users.full_name</code>.
     */
    val FULL_NAME: TableField<SystemUsersRecord, String?> = createField(DSL.name("full_name"), SQLDataType.VARCHAR(250), this, "")

    /**
     * The column <code>public.system_users.short_name</code>.
     */
    val SHORT_NAME: TableField<SystemUsersRecord, String?> = createField(DSL.name("short_name"), SQLDataType.VARCHAR(250), this, "")

    /**
     * The column <code>public.system_users.at_count</code>.
     */
    val AT_COUNT: TableField<SystemUsersRecord, Int?> = createField(DSL.name("at_count"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.system_users.at_ye</code>.
     */
    val AT_YE: TableField<SystemUsersRecord, Int?> = createField(DSL.name("at_ye"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.system_users.at_mo</code>.
     */
    val AT_MO: TableField<SystemUsersRecord, Int?> = createField(DSL.name("at_mo"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.system_users.at_da</code>.
     */
    val AT_DA: TableField<SystemUsersRecord, Int?> = createField(DSL.name("at_da"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.system_users.at_ho</code>.
     */
    val AT_HO: TableField<SystemUsersRecord, Int?> = createField(DSL.name("at_ho"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.system_users.at_mi</code>.
     */
    val AT_MI: TableField<SystemUsersRecord, Int?> = createField(DSL.name("at_mi"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.system_users.pwd_ye</code>.
     */
    val PWD_YE: TableField<SystemUsersRecord, Int?> = createField(DSL.name("pwd_ye"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.system_users.pwd_mo</code>.
     */
    val PWD_MO: TableField<SystemUsersRecord, Int?> = createField(DSL.name("pwd_mo"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.system_users.pwd_da</code>.
     */
    val PWD_DA: TableField<SystemUsersRecord, Int?> = createField(DSL.name("pwd_da"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.system_users.e_mail</code>.
     */
    val E_MAIL: TableField<SystemUsersRecord, String?> = createField(DSL.name("e_mail"), SQLDataType.VARCHAR(250), this, "")

    /**
     * The column <code>public.system_users.contact_info</code>.
     */
    val CONTACT_INFO: TableField<SystemUsersRecord, String?> = createField(DSL.name("contact_info"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.system_users.file_id</code>.
     */
    val FILE_ID: TableField<SystemUsersRecord, Int?> = createField(DSL.name("file_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.system_users.last_ip</code>.
     */
    val LAST_IP: TableField<SystemUsersRecord, String?> = createField(DSL.name("last_ip"), SQLDataType.VARCHAR(250), this, "")

    /**
     * The column <code>public.system_users.user_id</code>.
     */
    val USER_ID: TableField<SystemUsersRecord, Int?> = createField(DSL.name("user_id"), SQLDataType.INTEGER.defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "")

    private constructor(alias: Name, aliased: Table<SystemUsersRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<SystemUsersRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.system_users</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.system_users</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.system_users</code> table reference
     */
    constructor(): this(DSL.name("system_users"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, SystemUsersRecord>): this(Internal.createPathAlias(child, key), child, key, SYSTEM_USERS, null)
    override fun getSchema(): Schema = Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(SYSTEM_USERS_DISABLED, SYSTEM_USERS_LOGIN, SYSTEM_USERS_ORG_TYPE, SYSTEM_USERS_PARENT, SYSTEM_USERS_PWD, SYSTEM_USERS_USER)
    override fun getPrimaryKey(): UniqueKey<SystemUsersRecord> = SYSTEM_USERS_PKEY
    override fun getKeys(): List<UniqueKey<SystemUsersRecord>> = listOf(SYSTEM_USERS_PKEY)
    override fun `as`(alias: String): SystemUsers = SystemUsers(DSL.name(alias), this)
    override fun `as`(alias: Name): SystemUsers = SystemUsers(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): SystemUsers = SystemUsers(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): SystemUsers = SystemUsers(name, null)

    // -------------------------------------------------------------------------
    // Row22 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row22<Int?, Int?, Int?, Int?, String?, String?, String?, String?, Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?, String?, String?, Int?, String?, Int?> = super.fieldsRow() as Row22<Int?, Int?, Int?, Int?, String?, String?, String?, String?, Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?, String?, String?, Int?, String?, Int?>
}
