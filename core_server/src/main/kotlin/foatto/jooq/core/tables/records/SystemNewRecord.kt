/*
 * This file is generated by jOOQ.
 */
package foatto.jooq.core.tables.records


import foatto.jooq.core.tables.SystemNew

import org.jooq.Field
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SystemNewRecord() : TableRecordImpl<SystemNewRecord>(SystemNew.SYSTEM_NEW), Record3<String?, Int?, Int?> {

    var tableName: String?
        set(value) = set(0, value)
        get() = get(0) as String?

    var rowId: Int?
        set(value) = set(1, value)
        get() = get(1) as Int?

    var userId: Int?
        set(value) = set(2, value)
        get() = get(2) as Int?

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<String?, Int?, Int?> = super.fieldsRow() as Row3<String?, Int?, Int?>
    override fun valuesRow(): Row3<String?, Int?, Int?> = super.valuesRow() as Row3<String?, Int?, Int?>
    override fun field1(): Field<String?> = SystemNew.SYSTEM_NEW.TABLE_NAME
    override fun field2(): Field<Int?> = SystemNew.SYSTEM_NEW.ROW_ID
    override fun field3(): Field<Int?> = SystemNew.SYSTEM_NEW.USER_ID
    override fun component1(): String? = tableName
    override fun component2(): Int? = rowId
    override fun component3(): Int? = userId
    override fun value1(): String? = tableName
    override fun value2(): Int? = rowId
    override fun value3(): Int? = userId

    override fun value1(value: String?): SystemNewRecord {
        this.tableName = value
        return this
    }

    override fun value2(value: Int?): SystemNewRecord {
        this.rowId = value
        return this
    }

    override fun value3(value: Int?): SystemNewRecord {
        this.userId = value
        return this
    }

    override fun values(value1: String?, value2: Int?, value3: Int?): SystemNewRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    /**
     * Create a detached, initialised SystemNewRecord
     */
    constructor(tableName: String? = null, rowId: Int? = null, userId: Int? = null): this() {
        this.tableName = tableName
        this.rowId = rowId
        this.userId = userId
    }
}
