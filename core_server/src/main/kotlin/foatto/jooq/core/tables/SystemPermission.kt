/*
 * This file is generated by jOOQ.
 */
package foatto.jooq.core.tables


import foatto.jooq.core.Public
import foatto.jooq.core.indexes.SYSTEM_PERMISSION_CLASS
import foatto.jooq.core.keys.SYSTEM_PERMISSION_PKEY
import foatto.jooq.core.tables.records.SystemPermissionRecord

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row4
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SystemPermission(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, SystemPermissionRecord>?,
    aliased: Table<SystemPermissionRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<SystemPermissionRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.system_permission</code>
         */
        val SYSTEM_PERMISSION = SystemPermission()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<SystemPermissionRecord> = SystemPermissionRecord::class.java

    /**
     * The column <code>public.system_permission.id</code>.
     */
    val ID: TableField<SystemPermissionRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.system_permission.class_id</code>.
     */
    val CLASS_ID: TableField<SystemPermissionRecord, Int?> = createField(DSL.name("class_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.system_permission.name</code>.
     */
    val NAME: TableField<SystemPermissionRecord, String?> = createField(DSL.name("name"), SQLDataType.VARCHAR(250), this, "")

    /**
     * The column <code>public.system_permission.descr</code>.
     */
    val DESCR: TableField<SystemPermissionRecord, String?> = createField(DSL.name("descr"), SQLDataType.VARCHAR(250), this, "")

    private constructor(alias: Name, aliased: Table<SystemPermissionRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<SystemPermissionRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.system_permission</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.system_permission</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.system_permission</code> table reference
     */
    constructor(): this(DSL.name("system_permission"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, SystemPermissionRecord>): this(Internal.createPathAlias(child, key), child, key, SYSTEM_PERMISSION, null)
    override fun getSchema(): Schema = Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(SYSTEM_PERMISSION_CLASS)
    override fun getPrimaryKey(): UniqueKey<SystemPermissionRecord> = SYSTEM_PERMISSION_PKEY
    override fun getKeys(): List<UniqueKey<SystemPermissionRecord>> = listOf(SYSTEM_PERMISSION_PKEY)
    override fun `as`(alias: String): SystemPermission = SystemPermission(DSL.name(alias), this)
    override fun `as`(alias: Name): SystemPermission = SystemPermission(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): SystemPermission = SystemPermission(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): SystemPermission = SystemPermission(name, null)

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row4<Int?, Int?, String?, String?> = super.fieldsRow() as Row4<Int?, Int?, String?, String?>
}
