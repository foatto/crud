/*
 * This file is generated by jOOQ.
 */
package foatto.jooq.core.tables.records


import foatto.jooq.core.tables.SystemRolePermission

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SystemRolePermissionRecord() : UpdatableRecordImpl<SystemRolePermissionRecord>(SystemRolePermission.SYSTEM_ROLE_PERMISSION), Record4<Int?, Int?, Int?, Int?> {

    var id: Int?
        set(value) = set(0, value)
        get() = get(0) as Int?

    var roleId: Int?
        set(value) = set(1, value)
        get() = get(1) as Int?

    var permissionId: Int?
        set(value) = set(2, value)
        get() = get(2) as Int?

    var permissionValue: Int?
        set(value) = set(3, value)
        get() = get(3) as Int?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<Int?, Int?, Int?, Int?> = super.fieldsRow() as Row4<Int?, Int?, Int?, Int?>
    override fun valuesRow(): Row4<Int?, Int?, Int?, Int?> = super.valuesRow() as Row4<Int?, Int?, Int?, Int?>
    override fun field1(): Field<Int?> = SystemRolePermission.SYSTEM_ROLE_PERMISSION.ID
    override fun field2(): Field<Int?> = SystemRolePermission.SYSTEM_ROLE_PERMISSION.ROLE_ID
    override fun field3(): Field<Int?> = SystemRolePermission.SYSTEM_ROLE_PERMISSION.PERMISSION_ID
    override fun field4(): Field<Int?> = SystemRolePermission.SYSTEM_ROLE_PERMISSION.PERMISSION_VALUE
    override fun component1(): Int? = id
    override fun component2(): Int? = roleId
    override fun component3(): Int? = permissionId
    override fun component4(): Int? = permissionValue
    override fun value1(): Int? = id
    override fun value2(): Int? = roleId
    override fun value3(): Int? = permissionId
    override fun value4(): Int? = permissionValue

    override fun value1(value: Int?): SystemRolePermissionRecord {
        this.id = value
        return this
    }

    override fun value2(value: Int?): SystemRolePermissionRecord {
        this.roleId = value
        return this
    }

    override fun value3(value: Int?): SystemRolePermissionRecord {
        this.permissionId = value
        return this
    }

    override fun value4(value: Int?): SystemRolePermissionRecord {
        this.permissionValue = value
        return this
    }

    override fun values(value1: Int?, value2: Int?, value3: Int?, value4: Int?): SystemRolePermissionRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised SystemRolePermissionRecord
     */
    constructor(id: Int? = null, roleId: Int? = null, permissionId: Int? = null, permissionValue: Int? = null): this() {
        this.id = id
        this.roleId = roleId
        this.permissionId = permissionId
        this.permissionValue = permissionValue
    }
}
