/*
 * This file is generated by jOOQ.
 */
package foatto.jooq.core.tables


import foatto.jooq.core.Public
import foatto.jooq.core.indexes.SYSTEM_USER_PROPERTY_NAME
import foatto.jooq.core.indexes.SYSTEM_USER_PROPERTY_USER
import foatto.jooq.core.tables.records.SystemUserPropertyRecord

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SystemUserProperty(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, SystemUserPropertyRecord>?,
    aliased: Table<SystemUserPropertyRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<SystemUserPropertyRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.system_user_property</code>
         */
        val SYSTEM_USER_PROPERTY = SystemUserProperty()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<SystemUserPropertyRecord> = SystemUserPropertyRecord::class.java

    /**
     * The column <code>public.system_user_property.user_id</code>.
     */
    val USER_ID: TableField<SystemUserPropertyRecord, Int?> = createField(DSL.name("user_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.system_user_property.property_name</code>.
     */
    val PROPERTY_NAME: TableField<SystemUserPropertyRecord, String?> = createField(DSL.name("property_name"), SQLDataType.VARCHAR(250), this, "")

    /**
     * The column <code>public.system_user_property.property_value</code>.
     */
    val PROPERTY_VALUE: TableField<SystemUserPropertyRecord, String?> = createField(DSL.name("property_value"), SQLDataType.VARCHAR(250), this, "")

    private constructor(alias: Name, aliased: Table<SystemUserPropertyRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<SystemUserPropertyRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.system_user_property</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.system_user_property</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.system_user_property</code> table reference
     */
    constructor(): this(DSL.name("system_user_property"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, SystemUserPropertyRecord>): this(Internal.createPathAlias(child, key), child, key, SYSTEM_USER_PROPERTY, null)
    override fun getSchema(): Schema = Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(SYSTEM_USER_PROPERTY_NAME, SYSTEM_USER_PROPERTY_USER)
    override fun `as`(alias: String): SystemUserProperty = SystemUserProperty(DSL.name(alias), this)
    override fun `as`(alias: Name): SystemUserProperty = SystemUserProperty(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): SystemUserProperty = SystemUserProperty(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): SystemUserProperty = SystemUserProperty(name, null)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row3<Int?, String?, String?> = super.fieldsRow() as Row3<Int?, String?, String?>
}
